// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace pb {
class GameRecordCommand;
class GameRecordCommandDefaultTypeInternal;
extern GameRecordCommandDefaultTypeInternal _GameRecordCommand_default_instance_;
class GameRecordResponse;
class GameRecordResponseDefaultTypeInternal;
extern GameRecordResponseDefaultTypeInternal _GameRecordResponse_default_instance_;
class LoginIndication;
class LoginIndicationDefaultTypeInternal;
extern LoginIndicationDefaultTypeInternal _LoginIndication_default_instance_;
class LoginReply;
class LoginReplyDefaultTypeInternal;
extern LoginReplyDefaultTypeInternal _LoginReply_default_instance_;
class Ping;
class PingDefaultTypeInternal;
extern PingDefaultTypeInternal _Ping_default_instance_;
class RecordCommand;
class RecordCommandDefaultTypeInternal;
extern RecordCommandDefaultTypeInternal _RecordCommand_default_instance_;
class RecordResponse;
class RecordResponseDefaultTypeInternal;
extern RecordResponseDefaultTypeInternal _RecordResponse_default_instance_;
class SceneCommand;
class SceneCommandDefaultTypeInternal;
extern SceneCommandDefaultTypeInternal _SceneCommand_default_instance_;
class SceneResponse;
class SceneResponseDefaultTypeInternal;
extern SceneResponseDefaultTypeInternal _SceneResponse_default_instance_;
}  // namespace pb
PROTOBUF_NAMESPACE_OPEN
template<> ::pb::GameRecordCommand* Arena::CreateMaybeMessage<::pb::GameRecordCommand>(Arena*);
template<> ::pb::GameRecordResponse* Arena::CreateMaybeMessage<::pb::GameRecordResponse>(Arena*);
template<> ::pb::LoginIndication* Arena::CreateMaybeMessage<::pb::LoginIndication>(Arena*);
template<> ::pb::LoginReply* Arena::CreateMaybeMessage<::pb::LoginReply>(Arena*);
template<> ::pb::Ping* Arena::CreateMaybeMessage<::pb::Ping>(Arena*);
template<> ::pb::RecordCommand* Arena::CreateMaybeMessage<::pb::RecordCommand>(Arena*);
template<> ::pb::RecordResponse* Arena::CreateMaybeMessage<::pb::RecordResponse>(Arena*);
template<> ::pb::SceneCommand* Arena::CreateMaybeMessage<::pb::SceneCommand>(Arena*);
template<> ::pb::SceneResponse* Arena::CreateMaybeMessage<::pb::SceneResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pb {

// ===================================================================

class Ping :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.Ping) */ {
 public:
  Ping();
  virtual ~Ping();

  Ping(const Ping& from);
  Ping(Ping&& from) noexcept
    : Ping() {
    *this = ::std::move(from);
  }

  inline Ping& operator=(const Ping& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ping& operator=(Ping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Ping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Ping* internal_default_instance() {
    return reinterpret_cast<const Ping*>(
               &_Ping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ping& a, Ping& b) {
    a.Swap(&b);
  }
  inline void Swap(Ping* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ping* New() const final {
    return CreateMaybeMessage<Ping>(nullptr);
  }

  Ping* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ping>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ping& from);
  void MergeFrom(const Ping& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ping* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.Ping";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHelloFieldNumber = 2,
    kTimeStampFieldNumber = 1,
  };
  // string hello = 2;
  void clear_hello();
  const std::string& hello() const;
  void set_hello(const std::string& value);
  void set_hello(std::string&& value);
  void set_hello(const char* value);
  void set_hello(const char* value, size_t size);
  std::string* mutable_hello();
  std::string* release_hello();
  void set_allocated_hello(std::string* hello);
  private:
  const std::string& _internal_hello() const;
  void _internal_set_hello(const std::string& value);
  std::string* _internal_mutable_hello();
  public:

  // uint32 timeStamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.Ping)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hello_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class LoginIndication :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.LoginIndication) */ {
 public:
  LoginIndication();
  virtual ~LoginIndication();

  LoginIndication(const LoginIndication& from);
  LoginIndication(LoginIndication&& from) noexcept
    : LoginIndication() {
    *this = ::std::move(from);
  }

  inline LoginIndication& operator=(const LoginIndication& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginIndication& operator=(LoginIndication&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginIndication& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginIndication* internal_default_instance() {
    return reinterpret_cast<const LoginIndication*>(
               &_LoginIndication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoginIndication& a, LoginIndication& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginIndication* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginIndication* New() const final {
    return CreateMaybeMessage<LoginIndication>(nullptr);
  }

  LoginIndication* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginIndication>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginIndication& from);
  void MergeFrom(const LoginIndication& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginIndication* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.LoginIndication";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevIdFieldNumber = 2,
    kStreamIdFieldNumber = 3,
    kTimeStampFieldNumber = 1,
  };
  // string devId = 2;
  void clear_devid();
  const std::string& devid() const;
  void set_devid(const std::string& value);
  void set_devid(std::string&& value);
  void set_devid(const char* value);
  void set_devid(const char* value, size_t size);
  std::string* mutable_devid();
  std::string* release_devid();
  void set_allocated_devid(std::string* devid);
  private:
  const std::string& _internal_devid() const;
  void _internal_set_devid(const std::string& value);
  std::string* _internal_mutable_devid();
  public:

  // string streamId = 3;
  void clear_streamid();
  const std::string& streamid() const;
  void set_streamid(const std::string& value);
  void set_streamid(std::string&& value);
  void set_streamid(const char* value);
  void set_streamid(const char* value, size_t size);
  std::string* mutable_streamid();
  std::string* release_streamid();
  void set_allocated_streamid(std::string* streamid);
  private:
  const std::string& _internal_streamid() const;
  void _internal_set_streamid(const std::string& value);
  std::string* _internal_mutable_streamid();
  public:

  // uint32 timeStamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.LoginIndication)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr devid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr streamid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class LoginReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.LoginReply) */ {
 public:
  LoginReply();
  virtual ~LoginReply();

  LoginReply(const LoginReply& from);
  LoginReply(LoginReply&& from) noexcept
    : LoginReply() {
    *this = ::std::move(from);
  }

  inline LoginReply& operator=(const LoginReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReply& operator=(LoginReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoginReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoginReply* internal_default_instance() {
    return reinterpret_cast<const LoginReply*>(
               &_LoginReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoginReply& a, LoginReply& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoginReply* New() const final {
    return CreateMaybeMessage<LoginReply>(nullptr);
  }

  LoginReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoginReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoginReply& from);
  void MergeFrom(const LoginReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.LoginReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kTimeStampFieldNumber = 1,
  };
  // string result = 2;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // uint32 timeStamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.LoginReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class SceneCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SceneCommand) */ {
 public:
  SceneCommand();
  virtual ~SceneCommand();

  SceneCommand(const SceneCommand& from);
  SceneCommand(SceneCommand&& from) noexcept
    : SceneCommand() {
    *this = ::std::move(from);
  }

  inline SceneCommand& operator=(const SceneCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneCommand& operator=(SceneCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneCommand* internal_default_instance() {
    return reinterpret_cast<const SceneCommand*>(
               &_SceneCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SceneCommand& a, SceneCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneCommand* New() const final {
    return CreateMaybeMessage<SceneCommand>(nullptr);
  }

  SceneCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneCommand& from);
  void MergeFrom(const SceneCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SceneCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 2,
    kSceneNameFieldNumber = 3,
    kInputNameFieldNumber = 4,
    kTimeStampFieldNumber = 1,
  };
  // string streamId = 2;
  void clear_streamid();
  const std::string& streamid() const;
  void set_streamid(const std::string& value);
  void set_streamid(std::string&& value);
  void set_streamid(const char* value);
  void set_streamid(const char* value, size_t size);
  std::string* mutable_streamid();
  std::string* release_streamid();
  void set_allocated_streamid(std::string* streamid);
  private:
  const std::string& _internal_streamid() const;
  void _internal_set_streamid(const std::string& value);
  std::string* _internal_mutable_streamid();
  public:

  // string sceneName = 3;
  void clear_scenename();
  const std::string& scenename() const;
  void set_scenename(const std::string& value);
  void set_scenename(std::string&& value);
  void set_scenename(const char* value);
  void set_scenename(const char* value, size_t size);
  std::string* mutable_scenename();
  std::string* release_scenename();
  void set_allocated_scenename(std::string* scenename);
  private:
  const std::string& _internal_scenename() const;
  void _internal_set_scenename(const std::string& value);
  std::string* _internal_mutable_scenename();
  public:

  // string inputName = 4;
  void clear_inputname();
  const std::string& inputname() const;
  void set_inputname(const std::string& value);
  void set_inputname(std::string&& value);
  void set_inputname(const char* value);
  void set_inputname(const char* value, size_t size);
  std::string* mutable_inputname();
  std::string* release_inputname();
  void set_allocated_inputname(std::string* inputname);
  private:
  const std::string& _internal_inputname() const;
  void _internal_set_inputname(const std::string& value);
  std::string* _internal_mutable_inputname();
  public:

  // uint32 timeStamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SceneCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr streamid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scenename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inputname_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class SceneResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.SceneResponse) */ {
 public:
  SceneResponse();
  virtual ~SceneResponse();

  SceneResponse(const SceneResponse& from);
  SceneResponse(SceneResponse&& from) noexcept
    : SceneResponse() {
    *this = ::std::move(from);
  }

  inline SceneResponse& operator=(const SceneResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SceneResponse& operator=(SceneResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SceneResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneResponse* internal_default_instance() {
    return reinterpret_cast<const SceneResponse*>(
               &_SceneResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SceneResponse& a, SceneResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SceneResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SceneResponse* New() const final {
    return CreateMaybeMessage<SceneResponse>(nullptr);
  }

  SceneResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SceneResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SceneResponse& from);
  void MergeFrom(const SceneResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.SceneResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kStreamIdFieldNumber = 3,
    kSceneNameFieldNumber = 4,
    kTimeStampFieldNumber = 1,
  };
  // string result = 2;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // string streamId = 3;
  void clear_streamid();
  const std::string& streamid() const;
  void set_streamid(const std::string& value);
  void set_streamid(std::string&& value);
  void set_streamid(const char* value);
  void set_streamid(const char* value, size_t size);
  std::string* mutable_streamid();
  std::string* release_streamid();
  void set_allocated_streamid(std::string* streamid);
  private:
  const std::string& _internal_streamid() const;
  void _internal_set_streamid(const std::string& value);
  std::string* _internal_mutable_streamid();
  public:

  // string sceneName = 4;
  void clear_scenename();
  const std::string& scenename() const;
  void set_scenename(const std::string& value);
  void set_scenename(std::string&& value);
  void set_scenename(const char* value);
  void set_scenename(const char* value, size_t size);
  std::string* mutable_scenename();
  std::string* release_scenename();
  void set_allocated_scenename(std::string* scenename);
  private:
  const std::string& _internal_scenename() const;
  void _internal_set_scenename(const std::string& value);
  std::string* _internal_mutable_scenename();
  public:

  // uint32 timeStamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.SceneResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr streamid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scenename_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GameRecordCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GameRecordCommand) */ {
 public:
  GameRecordCommand();
  virtual ~GameRecordCommand();

  GameRecordCommand(const GameRecordCommand& from);
  GameRecordCommand(GameRecordCommand&& from) noexcept
    : GameRecordCommand() {
    *this = ::std::move(from);
  }

  inline GameRecordCommand& operator=(const GameRecordCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameRecordCommand& operator=(GameRecordCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameRecordCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameRecordCommand* internal_default_instance() {
    return reinterpret_cast<const GameRecordCommand*>(
               &_GameRecordCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GameRecordCommand& a, GameRecordCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GameRecordCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameRecordCommand* New() const final {
    return CreateMaybeMessage<GameRecordCommand>(nullptr);
  }

  GameRecordCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameRecordCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameRecordCommand& from);
  void MergeFrom(const GameRecordCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameRecordCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GameRecordCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTableIdFieldNumber = 2,
    kGameCodeFieldNumber = 3,
    kRecordActionFieldNumber = 4,
    kTimeStampFieldNumber = 1,
  };
  // string tableId = 2;
  void clear_tableid();
  const std::string& tableid() const;
  void set_tableid(const std::string& value);
  void set_tableid(std::string&& value);
  void set_tableid(const char* value);
  void set_tableid(const char* value, size_t size);
  std::string* mutable_tableid();
  std::string* release_tableid();
  void set_allocated_tableid(std::string* tableid);
  private:
  const std::string& _internal_tableid() const;
  void _internal_set_tableid(const std::string& value);
  std::string* _internal_mutable_tableid();
  public:

  // string gameCode = 3;
  void clear_gamecode();
  const std::string& gamecode() const;
  void set_gamecode(const std::string& value);
  void set_gamecode(std::string&& value);
  void set_gamecode(const char* value);
  void set_gamecode(const char* value, size_t size);
  std::string* mutable_gamecode();
  std::string* release_gamecode();
  void set_allocated_gamecode(std::string* gamecode);
  private:
  const std::string& _internal_gamecode() const;
  void _internal_set_gamecode(const std::string& value);
  std::string* _internal_mutable_gamecode();
  public:

  // string recordAction = 4;
  void clear_recordaction();
  const std::string& recordaction() const;
  void set_recordaction(const std::string& value);
  void set_recordaction(std::string&& value);
  void set_recordaction(const char* value);
  void set_recordaction(const char* value, size_t size);
  std::string* mutable_recordaction();
  std::string* release_recordaction();
  void set_allocated_recordaction(std::string* recordaction);
  private:
  const std::string& _internal_recordaction() const;
  void _internal_set_recordaction(const std::string& value);
  std::string* _internal_mutable_recordaction();
  public:

  // uint32 timeStamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.GameRecordCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tableid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gamecode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordaction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class GameRecordResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.GameRecordResponse) */ {
 public:
  GameRecordResponse();
  virtual ~GameRecordResponse();

  GameRecordResponse(const GameRecordResponse& from);
  GameRecordResponse(GameRecordResponse&& from) noexcept
    : GameRecordResponse() {
    *this = ::std::move(from);
  }

  inline GameRecordResponse& operator=(const GameRecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GameRecordResponse& operator=(GameRecordResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GameRecordResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameRecordResponse* internal_default_instance() {
    return reinterpret_cast<const GameRecordResponse*>(
               &_GameRecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GameRecordResponse& a, GameRecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GameRecordResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GameRecordResponse* New() const final {
    return CreateMaybeMessage<GameRecordResponse>(nullptr);
  }

  GameRecordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GameRecordResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GameRecordResponse& from);
  void MergeFrom(const GameRecordResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameRecordResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.GameRecordResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kTimeStampFieldNumber = 1,
  };
  // string result = 2;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // uint32 timeStamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.GameRecordResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RecordCommand :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RecordCommand) */ {
 public:
  RecordCommand();
  virtual ~RecordCommand();

  RecordCommand(const RecordCommand& from);
  RecordCommand(RecordCommand&& from) noexcept
    : RecordCommand() {
    *this = ::std::move(from);
  }

  inline RecordCommand& operator=(const RecordCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordCommand& operator=(RecordCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordCommand* internal_default_instance() {
    return reinterpret_cast<const RecordCommand*>(
               &_RecordCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RecordCommand& a, RecordCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordCommand* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordCommand* New() const final {
    return CreateMaybeMessage<RecordCommand>(nullptr);
  }

  RecordCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordCommand& from);
  void MergeFrom(const RecordCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RecordCommand";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStreamIdFieldNumber = 2,
    kSaveNameFieldNumber = 3,
    kRecordActionFieldNumber = 4,
    kTimeStampFieldNumber = 1,
  };
  // string streamId = 2;
  void clear_streamid();
  const std::string& streamid() const;
  void set_streamid(const std::string& value);
  void set_streamid(std::string&& value);
  void set_streamid(const char* value);
  void set_streamid(const char* value, size_t size);
  std::string* mutable_streamid();
  std::string* release_streamid();
  void set_allocated_streamid(std::string* streamid);
  private:
  const std::string& _internal_streamid() const;
  void _internal_set_streamid(const std::string& value);
  std::string* _internal_mutable_streamid();
  public:

  // string saveName = 3;
  void clear_savename();
  const std::string& savename() const;
  void set_savename(const std::string& value);
  void set_savename(std::string&& value);
  void set_savename(const char* value);
  void set_savename(const char* value, size_t size);
  std::string* mutable_savename();
  std::string* release_savename();
  void set_allocated_savename(std::string* savename);
  private:
  const std::string& _internal_savename() const;
  void _internal_set_savename(const std::string& value);
  std::string* _internal_mutable_savename();
  public:

  // string recordAction = 4;
  void clear_recordaction();
  const std::string& recordaction() const;
  void set_recordaction(const std::string& value);
  void set_recordaction(std::string&& value);
  void set_recordaction(const char* value);
  void set_recordaction(const char* value, size_t size);
  std::string* mutable_recordaction();
  std::string* release_recordaction();
  void set_allocated_recordaction(std::string* recordaction);
  private:
  const std::string& _internal_recordaction() const;
  void _internal_set_recordaction(const std::string& value);
  std::string* _internal_mutable_recordaction();
  public:

  // uint32 timeStamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.RecordCommand)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr streamid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr savename_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr recordaction_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class RecordResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pb.RecordResponse) */ {
 public:
  RecordResponse();
  virtual ~RecordResponse();

  RecordResponse(const RecordResponse& from);
  RecordResponse(RecordResponse&& from) noexcept
    : RecordResponse() {
    *this = ::std::move(from);
  }

  inline RecordResponse& operator=(const RecordResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordResponse& operator=(RecordResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RecordResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecordResponse* internal_default_instance() {
    return reinterpret_cast<const RecordResponse*>(
               &_RecordResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RecordResponse& a, RecordResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordResponse* New() const final {
    return CreateMaybeMessage<RecordResponse>(nullptr);
  }

  RecordResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordResponse& from);
  void MergeFrom(const RecordResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pb.RecordResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kTimeStampFieldNumber = 1,
  };
  // string result = 2;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const char* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // uint32 timeStamp = 1;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pb.RecordResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timestamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ping

// uint32 timeStamp = 1;
inline void Ping::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ping::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Ping::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.Ping.timeStamp)
  return _internal_timestamp();
}
inline void Ping::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timestamp_ = value;
}
inline void Ping::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:pb.Ping.timeStamp)
}

// string hello = 2;
inline void Ping::clear_hello() {
  hello_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Ping::hello() const {
  // @@protoc_insertion_point(field_get:pb.Ping.hello)
  return _internal_hello();
}
inline void Ping::set_hello(const std::string& value) {
  _internal_set_hello(value);
  // @@protoc_insertion_point(field_set:pb.Ping.hello)
}
inline std::string* Ping::mutable_hello() {
  // @@protoc_insertion_point(field_mutable:pb.Ping.hello)
  return _internal_mutable_hello();
}
inline const std::string& Ping::_internal_hello() const {
  return hello_.GetNoArena();
}
inline void Ping::_internal_set_hello(const std::string& value) {
  
  hello_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Ping::set_hello(std::string&& value) {
  
  hello_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.Ping.hello)
}
inline void Ping::set_hello(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hello_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.Ping.hello)
}
inline void Ping::set_hello(const char* value, size_t size) {
  
  hello_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.Ping.hello)
}
inline std::string* Ping::_internal_mutable_hello() {
  
  return hello_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Ping::release_hello() {
  // @@protoc_insertion_point(field_release:pb.Ping.hello)
  
  return hello_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Ping::set_allocated_hello(std::string* hello) {
  if (hello != nullptr) {
    
  } else {
    
  }
  hello_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hello);
  // @@protoc_insertion_point(field_set_allocated:pb.Ping.hello)
}

// -------------------------------------------------------------------

// LoginIndication

// uint32 timeStamp = 1;
inline void LoginIndication::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginIndication::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginIndication::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.LoginIndication.timeStamp)
  return _internal_timestamp();
}
inline void LoginIndication::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timestamp_ = value;
}
inline void LoginIndication::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:pb.LoginIndication.timeStamp)
}

// string devId = 2;
inline void LoginIndication::clear_devid() {
  devid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginIndication::devid() const {
  // @@protoc_insertion_point(field_get:pb.LoginIndication.devId)
  return _internal_devid();
}
inline void LoginIndication::set_devid(const std::string& value) {
  _internal_set_devid(value);
  // @@protoc_insertion_point(field_set:pb.LoginIndication.devId)
}
inline std::string* LoginIndication::mutable_devid() {
  // @@protoc_insertion_point(field_mutable:pb.LoginIndication.devId)
  return _internal_mutable_devid();
}
inline const std::string& LoginIndication::_internal_devid() const {
  return devid_.GetNoArena();
}
inline void LoginIndication::_internal_set_devid(const std::string& value) {
  
  devid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginIndication::set_devid(std::string&& value) {
  
  devid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.LoginIndication.devId)
}
inline void LoginIndication::set_devid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  devid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.LoginIndication.devId)
}
inline void LoginIndication::set_devid(const char* value, size_t size) {
  
  devid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.LoginIndication.devId)
}
inline std::string* LoginIndication::_internal_mutable_devid() {
  
  return devid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginIndication::release_devid() {
  // @@protoc_insertion_point(field_release:pb.LoginIndication.devId)
  
  return devid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginIndication::set_allocated_devid(std::string* devid) {
  if (devid != nullptr) {
    
  } else {
    
  }
  devid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), devid);
  // @@protoc_insertion_point(field_set_allocated:pb.LoginIndication.devId)
}

// string streamId = 3;
inline void LoginIndication::clear_streamid() {
  streamid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginIndication::streamid() const {
  // @@protoc_insertion_point(field_get:pb.LoginIndication.streamId)
  return _internal_streamid();
}
inline void LoginIndication::set_streamid(const std::string& value) {
  _internal_set_streamid(value);
  // @@protoc_insertion_point(field_set:pb.LoginIndication.streamId)
}
inline std::string* LoginIndication::mutable_streamid() {
  // @@protoc_insertion_point(field_mutable:pb.LoginIndication.streamId)
  return _internal_mutable_streamid();
}
inline const std::string& LoginIndication::_internal_streamid() const {
  return streamid_.GetNoArena();
}
inline void LoginIndication::_internal_set_streamid(const std::string& value) {
  
  streamid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginIndication::set_streamid(std::string&& value) {
  
  streamid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.LoginIndication.streamId)
}
inline void LoginIndication::set_streamid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  streamid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.LoginIndication.streamId)
}
inline void LoginIndication::set_streamid(const char* value, size_t size) {
  
  streamid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.LoginIndication.streamId)
}
inline std::string* LoginIndication::_internal_mutable_streamid() {
  
  return streamid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginIndication::release_streamid() {
  // @@protoc_insertion_point(field_release:pb.LoginIndication.streamId)
  
  return streamid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginIndication::set_allocated_streamid(std::string* streamid) {
  if (streamid != nullptr) {
    
  } else {
    
  }
  streamid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), streamid);
  // @@protoc_insertion_point(field_set_allocated:pb.LoginIndication.streamId)
}

// -------------------------------------------------------------------

// LoginReply

// uint32 timeStamp = 1;
inline void LoginReply::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginReply::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LoginReply::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.LoginReply.timeStamp)
  return _internal_timestamp();
}
inline void LoginReply::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timestamp_ = value;
}
inline void LoginReply::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:pb.LoginReply.timeStamp)
}

// string result = 2;
inline void LoginReply::clear_result() {
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoginReply::result() const {
  // @@protoc_insertion_point(field_get:pb.LoginReply.result)
  return _internal_result();
}
inline void LoginReply::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pb.LoginReply.result)
}
inline std::string* LoginReply::mutable_result() {
  // @@protoc_insertion_point(field_mutable:pb.LoginReply.result)
  return _internal_mutable_result();
}
inline const std::string& LoginReply::_internal_result() const {
  return result_.GetNoArena();
}
inline void LoginReply::_internal_set_result(const std::string& value) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoginReply::set_result(std::string&& value) {
  
  result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.LoginReply.result)
}
inline void LoginReply::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.LoginReply.result)
}
inline void LoginReply::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.LoginReply.result)
}
inline std::string* LoginReply::_internal_mutable_result() {
  
  return result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoginReply::release_result() {
  // @@protoc_insertion_point(field_release:pb.LoginReply.result)
  
  return result_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoginReply::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:pb.LoginReply.result)
}

// -------------------------------------------------------------------

// SceneCommand

// uint32 timeStamp = 1;
inline void SceneCommand::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneCommand::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneCommand::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.SceneCommand.timeStamp)
  return _internal_timestamp();
}
inline void SceneCommand::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timestamp_ = value;
}
inline void SceneCommand::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:pb.SceneCommand.timeStamp)
}

// string streamId = 2;
inline void SceneCommand::clear_streamid() {
  streamid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SceneCommand::streamid() const {
  // @@protoc_insertion_point(field_get:pb.SceneCommand.streamId)
  return _internal_streamid();
}
inline void SceneCommand::set_streamid(const std::string& value) {
  _internal_set_streamid(value);
  // @@protoc_insertion_point(field_set:pb.SceneCommand.streamId)
}
inline std::string* SceneCommand::mutable_streamid() {
  // @@protoc_insertion_point(field_mutable:pb.SceneCommand.streamId)
  return _internal_mutable_streamid();
}
inline const std::string& SceneCommand::_internal_streamid() const {
  return streamid_.GetNoArena();
}
inline void SceneCommand::_internal_set_streamid(const std::string& value) {
  
  streamid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SceneCommand::set_streamid(std::string&& value) {
  
  streamid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SceneCommand.streamId)
}
inline void SceneCommand::set_streamid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  streamid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SceneCommand.streamId)
}
inline void SceneCommand::set_streamid(const char* value, size_t size) {
  
  streamid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SceneCommand.streamId)
}
inline std::string* SceneCommand::_internal_mutable_streamid() {
  
  return streamid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SceneCommand::release_streamid() {
  // @@protoc_insertion_point(field_release:pb.SceneCommand.streamId)
  
  return streamid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SceneCommand::set_allocated_streamid(std::string* streamid) {
  if (streamid != nullptr) {
    
  } else {
    
  }
  streamid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), streamid);
  // @@protoc_insertion_point(field_set_allocated:pb.SceneCommand.streamId)
}

// string sceneName = 3;
inline void SceneCommand::clear_scenename() {
  scenename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SceneCommand::scenename() const {
  // @@protoc_insertion_point(field_get:pb.SceneCommand.sceneName)
  return _internal_scenename();
}
inline void SceneCommand::set_scenename(const std::string& value) {
  _internal_set_scenename(value);
  // @@protoc_insertion_point(field_set:pb.SceneCommand.sceneName)
}
inline std::string* SceneCommand::mutable_scenename() {
  // @@protoc_insertion_point(field_mutable:pb.SceneCommand.sceneName)
  return _internal_mutable_scenename();
}
inline const std::string& SceneCommand::_internal_scenename() const {
  return scenename_.GetNoArena();
}
inline void SceneCommand::_internal_set_scenename(const std::string& value) {
  
  scenename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SceneCommand::set_scenename(std::string&& value) {
  
  scenename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SceneCommand.sceneName)
}
inline void SceneCommand::set_scenename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scenename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SceneCommand.sceneName)
}
inline void SceneCommand::set_scenename(const char* value, size_t size) {
  
  scenename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SceneCommand.sceneName)
}
inline std::string* SceneCommand::_internal_mutable_scenename() {
  
  return scenename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SceneCommand::release_scenename() {
  // @@protoc_insertion_point(field_release:pb.SceneCommand.sceneName)
  
  return scenename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SceneCommand::set_allocated_scenename(std::string* scenename) {
  if (scenename != nullptr) {
    
  } else {
    
  }
  scenename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scenename);
  // @@protoc_insertion_point(field_set_allocated:pb.SceneCommand.sceneName)
}

// string inputName = 4;
inline void SceneCommand::clear_inputname() {
  inputname_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SceneCommand::inputname() const {
  // @@protoc_insertion_point(field_get:pb.SceneCommand.inputName)
  return _internal_inputname();
}
inline void SceneCommand::set_inputname(const std::string& value) {
  _internal_set_inputname(value);
  // @@protoc_insertion_point(field_set:pb.SceneCommand.inputName)
}
inline std::string* SceneCommand::mutable_inputname() {
  // @@protoc_insertion_point(field_mutable:pb.SceneCommand.inputName)
  return _internal_mutable_inputname();
}
inline const std::string& SceneCommand::_internal_inputname() const {
  return inputname_.GetNoArena();
}
inline void SceneCommand::_internal_set_inputname(const std::string& value) {
  
  inputname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SceneCommand::set_inputname(std::string&& value) {
  
  inputname_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SceneCommand.inputName)
}
inline void SceneCommand::set_inputname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  inputname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SceneCommand.inputName)
}
inline void SceneCommand::set_inputname(const char* value, size_t size) {
  
  inputname_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SceneCommand.inputName)
}
inline std::string* SceneCommand::_internal_mutable_inputname() {
  
  return inputname_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SceneCommand::release_inputname() {
  // @@protoc_insertion_point(field_release:pb.SceneCommand.inputName)
  
  return inputname_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SceneCommand::set_allocated_inputname(std::string* inputname) {
  if (inputname != nullptr) {
    
  } else {
    
  }
  inputname_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inputname);
  // @@protoc_insertion_point(field_set_allocated:pb.SceneCommand.inputName)
}

// -------------------------------------------------------------------

// SceneResponse

// uint32 timeStamp = 1;
inline void SceneResponse::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneResponse::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SceneResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.SceneResponse.timeStamp)
  return _internal_timestamp();
}
inline void SceneResponse::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timestamp_ = value;
}
inline void SceneResponse::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:pb.SceneResponse.timeStamp)
}

// string result = 2;
inline void SceneResponse::clear_result() {
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SceneResponse::result() const {
  // @@protoc_insertion_point(field_get:pb.SceneResponse.result)
  return _internal_result();
}
inline void SceneResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pb.SceneResponse.result)
}
inline std::string* SceneResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:pb.SceneResponse.result)
  return _internal_mutable_result();
}
inline const std::string& SceneResponse::_internal_result() const {
  return result_.GetNoArena();
}
inline void SceneResponse::_internal_set_result(const std::string& value) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SceneResponse::set_result(std::string&& value) {
  
  result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SceneResponse.result)
}
inline void SceneResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SceneResponse.result)
}
inline void SceneResponse::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SceneResponse.result)
}
inline std::string* SceneResponse::_internal_mutable_result() {
  
  return result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SceneResponse::release_result() {
  // @@protoc_insertion_point(field_release:pb.SceneResponse.result)
  
  return result_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SceneResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:pb.SceneResponse.result)
}

// string streamId = 3;
inline void SceneResponse::clear_streamid() {
  streamid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SceneResponse::streamid() const {
  // @@protoc_insertion_point(field_get:pb.SceneResponse.streamId)
  return _internal_streamid();
}
inline void SceneResponse::set_streamid(const std::string& value) {
  _internal_set_streamid(value);
  // @@protoc_insertion_point(field_set:pb.SceneResponse.streamId)
}
inline std::string* SceneResponse::mutable_streamid() {
  // @@protoc_insertion_point(field_mutable:pb.SceneResponse.streamId)
  return _internal_mutable_streamid();
}
inline const std::string& SceneResponse::_internal_streamid() const {
  return streamid_.GetNoArena();
}
inline void SceneResponse::_internal_set_streamid(const std::string& value) {
  
  streamid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SceneResponse::set_streamid(std::string&& value) {
  
  streamid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SceneResponse.streamId)
}
inline void SceneResponse::set_streamid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  streamid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SceneResponse.streamId)
}
inline void SceneResponse::set_streamid(const char* value, size_t size) {
  
  streamid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SceneResponse.streamId)
}
inline std::string* SceneResponse::_internal_mutable_streamid() {
  
  return streamid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SceneResponse::release_streamid() {
  // @@protoc_insertion_point(field_release:pb.SceneResponse.streamId)
  
  return streamid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SceneResponse::set_allocated_streamid(std::string* streamid) {
  if (streamid != nullptr) {
    
  } else {
    
  }
  streamid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), streamid);
  // @@protoc_insertion_point(field_set_allocated:pb.SceneResponse.streamId)
}

// string sceneName = 4;
inline void SceneResponse::clear_scenename() {
  scenename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SceneResponse::scenename() const {
  // @@protoc_insertion_point(field_get:pb.SceneResponse.sceneName)
  return _internal_scenename();
}
inline void SceneResponse::set_scenename(const std::string& value) {
  _internal_set_scenename(value);
  // @@protoc_insertion_point(field_set:pb.SceneResponse.sceneName)
}
inline std::string* SceneResponse::mutable_scenename() {
  // @@protoc_insertion_point(field_mutable:pb.SceneResponse.sceneName)
  return _internal_mutable_scenename();
}
inline const std::string& SceneResponse::_internal_scenename() const {
  return scenename_.GetNoArena();
}
inline void SceneResponse::_internal_set_scenename(const std::string& value) {
  
  scenename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SceneResponse::set_scenename(std::string&& value) {
  
  scenename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.SceneResponse.sceneName)
}
inline void SceneResponse::set_scenename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  scenename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.SceneResponse.sceneName)
}
inline void SceneResponse::set_scenename(const char* value, size_t size) {
  
  scenename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.SceneResponse.sceneName)
}
inline std::string* SceneResponse::_internal_mutable_scenename() {
  
  return scenename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SceneResponse::release_scenename() {
  // @@protoc_insertion_point(field_release:pb.SceneResponse.sceneName)
  
  return scenename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SceneResponse::set_allocated_scenename(std::string* scenename) {
  if (scenename != nullptr) {
    
  } else {
    
  }
  scenename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scenename);
  // @@protoc_insertion_point(field_set_allocated:pb.SceneResponse.sceneName)
}

// -------------------------------------------------------------------

// GameRecordCommand

// uint32 timeStamp = 1;
inline void GameRecordCommand::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameRecordCommand::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameRecordCommand::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.GameRecordCommand.timeStamp)
  return _internal_timestamp();
}
inline void GameRecordCommand::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timestamp_ = value;
}
inline void GameRecordCommand::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:pb.GameRecordCommand.timeStamp)
}

// string tableId = 2;
inline void GameRecordCommand::clear_tableid() {
  tableid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameRecordCommand::tableid() const {
  // @@protoc_insertion_point(field_get:pb.GameRecordCommand.tableId)
  return _internal_tableid();
}
inline void GameRecordCommand::set_tableid(const std::string& value) {
  _internal_set_tableid(value);
  // @@protoc_insertion_point(field_set:pb.GameRecordCommand.tableId)
}
inline std::string* GameRecordCommand::mutable_tableid() {
  // @@protoc_insertion_point(field_mutable:pb.GameRecordCommand.tableId)
  return _internal_mutable_tableid();
}
inline const std::string& GameRecordCommand::_internal_tableid() const {
  return tableid_.GetNoArena();
}
inline void GameRecordCommand::_internal_set_tableid(const std::string& value) {
  
  tableid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameRecordCommand::set_tableid(std::string&& value) {
  
  tableid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.GameRecordCommand.tableId)
}
inline void GameRecordCommand::set_tableid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tableid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.GameRecordCommand.tableId)
}
inline void GameRecordCommand::set_tableid(const char* value, size_t size) {
  
  tableid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.GameRecordCommand.tableId)
}
inline std::string* GameRecordCommand::_internal_mutable_tableid() {
  
  return tableid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameRecordCommand::release_tableid() {
  // @@protoc_insertion_point(field_release:pb.GameRecordCommand.tableId)
  
  return tableid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameRecordCommand::set_allocated_tableid(std::string* tableid) {
  if (tableid != nullptr) {
    
  } else {
    
  }
  tableid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tableid);
  // @@protoc_insertion_point(field_set_allocated:pb.GameRecordCommand.tableId)
}

// string gameCode = 3;
inline void GameRecordCommand::clear_gamecode() {
  gamecode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameRecordCommand::gamecode() const {
  // @@protoc_insertion_point(field_get:pb.GameRecordCommand.gameCode)
  return _internal_gamecode();
}
inline void GameRecordCommand::set_gamecode(const std::string& value) {
  _internal_set_gamecode(value);
  // @@protoc_insertion_point(field_set:pb.GameRecordCommand.gameCode)
}
inline std::string* GameRecordCommand::mutable_gamecode() {
  // @@protoc_insertion_point(field_mutable:pb.GameRecordCommand.gameCode)
  return _internal_mutable_gamecode();
}
inline const std::string& GameRecordCommand::_internal_gamecode() const {
  return gamecode_.GetNoArena();
}
inline void GameRecordCommand::_internal_set_gamecode(const std::string& value) {
  
  gamecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameRecordCommand::set_gamecode(std::string&& value) {
  
  gamecode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.GameRecordCommand.gameCode)
}
inline void GameRecordCommand::set_gamecode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gamecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.GameRecordCommand.gameCode)
}
inline void GameRecordCommand::set_gamecode(const char* value, size_t size) {
  
  gamecode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.GameRecordCommand.gameCode)
}
inline std::string* GameRecordCommand::_internal_mutable_gamecode() {
  
  return gamecode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameRecordCommand::release_gamecode() {
  // @@protoc_insertion_point(field_release:pb.GameRecordCommand.gameCode)
  
  return gamecode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameRecordCommand::set_allocated_gamecode(std::string* gamecode) {
  if (gamecode != nullptr) {
    
  } else {
    
  }
  gamecode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gamecode);
  // @@protoc_insertion_point(field_set_allocated:pb.GameRecordCommand.gameCode)
}

// string recordAction = 4;
inline void GameRecordCommand::clear_recordaction() {
  recordaction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameRecordCommand::recordaction() const {
  // @@protoc_insertion_point(field_get:pb.GameRecordCommand.recordAction)
  return _internal_recordaction();
}
inline void GameRecordCommand::set_recordaction(const std::string& value) {
  _internal_set_recordaction(value);
  // @@protoc_insertion_point(field_set:pb.GameRecordCommand.recordAction)
}
inline std::string* GameRecordCommand::mutable_recordaction() {
  // @@protoc_insertion_point(field_mutable:pb.GameRecordCommand.recordAction)
  return _internal_mutable_recordaction();
}
inline const std::string& GameRecordCommand::_internal_recordaction() const {
  return recordaction_.GetNoArena();
}
inline void GameRecordCommand::_internal_set_recordaction(const std::string& value) {
  
  recordaction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameRecordCommand::set_recordaction(std::string&& value) {
  
  recordaction_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.GameRecordCommand.recordAction)
}
inline void GameRecordCommand::set_recordaction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordaction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.GameRecordCommand.recordAction)
}
inline void GameRecordCommand::set_recordaction(const char* value, size_t size) {
  
  recordaction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.GameRecordCommand.recordAction)
}
inline std::string* GameRecordCommand::_internal_mutable_recordaction() {
  
  return recordaction_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameRecordCommand::release_recordaction() {
  // @@protoc_insertion_point(field_release:pb.GameRecordCommand.recordAction)
  
  return recordaction_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameRecordCommand::set_allocated_recordaction(std::string* recordaction) {
  if (recordaction != nullptr) {
    
  } else {
    
  }
  recordaction_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordaction);
  // @@protoc_insertion_point(field_set_allocated:pb.GameRecordCommand.recordAction)
}

// -------------------------------------------------------------------

// GameRecordResponse

// uint32 timeStamp = 1;
inline void GameRecordResponse::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameRecordResponse::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 GameRecordResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.GameRecordResponse.timeStamp)
  return _internal_timestamp();
}
inline void GameRecordResponse::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timestamp_ = value;
}
inline void GameRecordResponse::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:pb.GameRecordResponse.timeStamp)
}

// string result = 2;
inline void GameRecordResponse::clear_result() {
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GameRecordResponse::result() const {
  // @@protoc_insertion_point(field_get:pb.GameRecordResponse.result)
  return _internal_result();
}
inline void GameRecordResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pb.GameRecordResponse.result)
}
inline std::string* GameRecordResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:pb.GameRecordResponse.result)
  return _internal_mutable_result();
}
inline const std::string& GameRecordResponse::_internal_result() const {
  return result_.GetNoArena();
}
inline void GameRecordResponse::_internal_set_result(const std::string& value) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GameRecordResponse::set_result(std::string&& value) {
  
  result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.GameRecordResponse.result)
}
inline void GameRecordResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.GameRecordResponse.result)
}
inline void GameRecordResponse::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.GameRecordResponse.result)
}
inline std::string* GameRecordResponse::_internal_mutable_result() {
  
  return result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GameRecordResponse::release_result() {
  // @@protoc_insertion_point(field_release:pb.GameRecordResponse.result)
  
  return result_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GameRecordResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:pb.GameRecordResponse.result)
}

// -------------------------------------------------------------------

// RecordCommand

// uint32 timeStamp = 1;
inline void RecordCommand::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecordCommand::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecordCommand::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.RecordCommand.timeStamp)
  return _internal_timestamp();
}
inline void RecordCommand::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timestamp_ = value;
}
inline void RecordCommand::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:pb.RecordCommand.timeStamp)
}

// string streamId = 2;
inline void RecordCommand::clear_streamid() {
  streamid_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RecordCommand::streamid() const {
  // @@protoc_insertion_point(field_get:pb.RecordCommand.streamId)
  return _internal_streamid();
}
inline void RecordCommand::set_streamid(const std::string& value) {
  _internal_set_streamid(value);
  // @@protoc_insertion_point(field_set:pb.RecordCommand.streamId)
}
inline std::string* RecordCommand::mutable_streamid() {
  // @@protoc_insertion_point(field_mutable:pb.RecordCommand.streamId)
  return _internal_mutable_streamid();
}
inline const std::string& RecordCommand::_internal_streamid() const {
  return streamid_.GetNoArena();
}
inline void RecordCommand::_internal_set_streamid(const std::string& value) {
  
  streamid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RecordCommand::set_streamid(std::string&& value) {
  
  streamid_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RecordCommand.streamId)
}
inline void RecordCommand::set_streamid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  streamid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RecordCommand.streamId)
}
inline void RecordCommand::set_streamid(const char* value, size_t size) {
  
  streamid_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RecordCommand.streamId)
}
inline std::string* RecordCommand::_internal_mutable_streamid() {
  
  return streamid_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RecordCommand::release_streamid() {
  // @@protoc_insertion_point(field_release:pb.RecordCommand.streamId)
  
  return streamid_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RecordCommand::set_allocated_streamid(std::string* streamid) {
  if (streamid != nullptr) {
    
  } else {
    
  }
  streamid_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), streamid);
  // @@protoc_insertion_point(field_set_allocated:pb.RecordCommand.streamId)
}

// string saveName = 3;
inline void RecordCommand::clear_savename() {
  savename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RecordCommand::savename() const {
  // @@protoc_insertion_point(field_get:pb.RecordCommand.saveName)
  return _internal_savename();
}
inline void RecordCommand::set_savename(const std::string& value) {
  _internal_set_savename(value);
  // @@protoc_insertion_point(field_set:pb.RecordCommand.saveName)
}
inline std::string* RecordCommand::mutable_savename() {
  // @@protoc_insertion_point(field_mutable:pb.RecordCommand.saveName)
  return _internal_mutable_savename();
}
inline const std::string& RecordCommand::_internal_savename() const {
  return savename_.GetNoArena();
}
inline void RecordCommand::_internal_set_savename(const std::string& value) {
  
  savename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RecordCommand::set_savename(std::string&& value) {
  
  savename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RecordCommand.saveName)
}
inline void RecordCommand::set_savename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  savename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RecordCommand.saveName)
}
inline void RecordCommand::set_savename(const char* value, size_t size) {
  
  savename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RecordCommand.saveName)
}
inline std::string* RecordCommand::_internal_mutable_savename() {
  
  return savename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RecordCommand::release_savename() {
  // @@protoc_insertion_point(field_release:pb.RecordCommand.saveName)
  
  return savename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RecordCommand::set_allocated_savename(std::string* savename) {
  if (savename != nullptr) {
    
  } else {
    
  }
  savename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), savename);
  // @@protoc_insertion_point(field_set_allocated:pb.RecordCommand.saveName)
}

// string recordAction = 4;
inline void RecordCommand::clear_recordaction() {
  recordaction_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RecordCommand::recordaction() const {
  // @@protoc_insertion_point(field_get:pb.RecordCommand.recordAction)
  return _internal_recordaction();
}
inline void RecordCommand::set_recordaction(const std::string& value) {
  _internal_set_recordaction(value);
  // @@protoc_insertion_point(field_set:pb.RecordCommand.recordAction)
}
inline std::string* RecordCommand::mutable_recordaction() {
  // @@protoc_insertion_point(field_mutable:pb.RecordCommand.recordAction)
  return _internal_mutable_recordaction();
}
inline const std::string& RecordCommand::_internal_recordaction() const {
  return recordaction_.GetNoArena();
}
inline void RecordCommand::_internal_set_recordaction(const std::string& value) {
  
  recordaction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RecordCommand::set_recordaction(std::string&& value) {
  
  recordaction_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RecordCommand.recordAction)
}
inline void RecordCommand::set_recordaction(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recordaction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RecordCommand.recordAction)
}
inline void RecordCommand::set_recordaction(const char* value, size_t size) {
  
  recordaction_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RecordCommand.recordAction)
}
inline std::string* RecordCommand::_internal_mutable_recordaction() {
  
  return recordaction_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RecordCommand::release_recordaction() {
  // @@protoc_insertion_point(field_release:pb.RecordCommand.recordAction)
  
  return recordaction_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RecordCommand::set_allocated_recordaction(std::string* recordaction) {
  if (recordaction != nullptr) {
    
  } else {
    
  }
  recordaction_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), recordaction);
  // @@protoc_insertion_point(field_set_allocated:pb.RecordCommand.recordAction)
}

// -------------------------------------------------------------------

// RecordResponse

// uint32 timeStamp = 1;
inline void RecordResponse::clear_timestamp() {
  timestamp_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecordResponse::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RecordResponse::timestamp() const {
  // @@protoc_insertion_point(field_get:pb.RecordResponse.timeStamp)
  return _internal_timestamp();
}
inline void RecordResponse::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timestamp_ = value;
}
inline void RecordResponse::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:pb.RecordResponse.timeStamp)
}

// string result = 2;
inline void RecordResponse::clear_result() {
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RecordResponse::result() const {
  // @@protoc_insertion_point(field_get:pb.RecordResponse.result)
  return _internal_result();
}
inline void RecordResponse::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:pb.RecordResponse.result)
}
inline std::string* RecordResponse::mutable_result() {
  // @@protoc_insertion_point(field_mutable:pb.RecordResponse.result)
  return _internal_mutable_result();
}
inline const std::string& RecordResponse::_internal_result() const {
  return result_.GetNoArena();
}
inline void RecordResponse::_internal_set_result(const std::string& value) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RecordResponse::set_result(std::string&& value) {
  
  result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:pb.RecordResponse.result)
}
inline void RecordResponse::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:pb.RecordResponse.result)
}
inline void RecordResponse::set_result(const char* value, size_t size) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:pb.RecordResponse.result)
}
inline std::string* RecordResponse::_internal_mutable_result() {
  
  return result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RecordResponse::release_result() {
  // @@protoc_insertion_point(field_release:pb.RecordResponse.result)
  
  return result_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RecordResponse::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:pb.RecordResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
